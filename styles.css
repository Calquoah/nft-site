/* General CSS */

/* 
Challenge:
1. Refactor the CSS to make it DRYer
   by grouping selectors together where
   possible.
*/

body {
    font-family: 'Roboto', sans-serif;
    font-size: 16px;
    color: #2b283a;
    margin: 0; /* to override the default browser margin */
}

/* Something to note:

When an element touches its parent, its
top and bottom margins will merge with the 
margins of the parent element 

What's the Solution to this problem?

To add padding to the parent element

*/

/* 
Challenge:
1. Create a "section" selector and give it the 
   same padding as the header.
2. In index.html, find the image of the purple 
   sneakers and attach a class to it. 
3. Make it so this image takes up 100% 
   of the section width.
*/

/* Typography */

/* 
Challenge:
1. Add CSS so the text in the first section 
   renders correctly. 
⚠️ Watch out for the amount of white space 
   you have between the start of the section 
   and the h2.
⚠️ Don't write too much code!
*/

/*
  Challenge:
   - Change all the font-sizes from em to rem:
     h1, h2, h3, .subheading, and .btn
*/

h1, h3 {
    margin: 0;
}

/*
  Challenge 4:
   - Convert the font-size values of the
     h1, h2, h3 and .subheading class from px to em
*/

h1 {
    font-size: 1.75rem; /* 36/16 = 2.25 */ /* To readjust the text for smaller font sizes: 28/16 */
    color: whitesmoke;
}


/*
  Challenge 13: Responsive text
    - h2:
        - Initial size: rem value equal to 22px
        - At 768px: increase to 1.75rem
    - .subheading:
        - Initial size: suitable for smaller screens
        - At 768px: increase to 1.25rem  
    - Paragraphs:
        - At 768px: increase to rem value equal to 18px
*/


h2 {
    /*font-size: 24px;
    color: #2b283a;*/ 

    /* You don't need to set the size and color
    properties because the body selector has already
    been set with these parameters */

    margin-top: 0;
    font-size: 1.375rem; /* 28/16 = 1.75 */ /* 22/16 */
}


h3 {
    font-size: 1.25rem; /* 20/16 = 1.25 */
    color: #d0aaff;
}

/* Links */

/* 
Challenge:
1. Increase the line-height of the 
   paragraph text to 23px;
*/

/*
  Challenge:
   - Set the line-height of the paragraph to a unitless value
     that’s 150% larger than the font size
*/

p {
    line-height: 1.5;
}

/* Rule of Thumb: Set line-height at 
approximately 1.5 times the font-size. */


/*p {
    font-size: 16px;
    color: #2b283a;

    Likewise, you don't need to set size
    and color because the body selector has
    taken care of that for you

}*/

/* 
Challenge:
1. Set the color of the link in the paragraph.
2. Make the link color change on hover and 
   active states.
3. Search online to find out how you can give 
   the underline a dotted appearance. 
*/

.subheading {
    display: block;
    /*font-size: 0.56em; /* 20/36 = 0.56 */
    font-size: 1rem; /*20/16 = 1.25 */ /* 16/16 */
    color: #d0aaff;
}

a {
    color: #ef5839;
    text-decoration: dotted underline;
}

a:hover, a:active {
    color: #d4b44c;
}

/* p > a:active {
    color: #d4b44c;
} */

/* 
Challenge:
1. Style the 4 button-style links as per 
   the specifications on the slide.
2. Remember to group the selectors
   where possible to keep the CSS DRY.
⚠️ Think: what would make good class
   names for these links? 
*/

/* 

My Solution

.buy-btn, 
.info-btn, 
.contact-btn, 
.about-btn {
    padding: 10px 19px;
    border-radius: 4.6px;
    font-weight: 600;
}

.info-btn, .about-btn {
    color: #5f29a3;
}

.info-btn {
    background-color: #f0e0ff;
}

.buy-btn {
    background-color: #5f29a3;
    color: whitesmoke;
}

.buy-btn:hover {
    background-color: #f3e885;
    color: #2b283a;
}

.about-btn {
    background-color: whitesmoke;
} */

/* Instructor's Solution:*/

/* Challenge:
1. Use the "display" property to make the
   new links behave more like buttons!
*/


/* 
Challenge:
1. Refactor the CSS for these button-style
   links using two classes on each link
   element.
⚠️ Think what to call the new class you
   will need to create.
*/

/*
  Challenge 5:
   1. Convert the padding value of .btn from px to em
   2. Space buttons both horizontally and vertically using margins and em units
   3. Convert the font-size of .btn from px to em
*/

/*
  Challenge 12:
    - On narrow screens, each button should take up the full width
      of their container 
    - The buttons should display on the same row only at the 768px breakpoint
*/

.btn {
    font-size: 1.125rem; /* 18 / 16 */
    font-weight: 500;
    text-decoration: none;
    text-align: center;
    display: block;
    padding: 0.5em 1em; /* 10px 20px */
    border-radius: 4.6px;
    margin-bottom: 1em;
}


.btn-dark {
    background-color: #5f29a3;
    color: whitesmoke;
}

.btn-mid {
    background-color: #f0e0ff;
    color: #5f29a3;
}

.btn-light {
    background-color: whitesmoke;
    color: #5f29a3;
}

.btn:hover,
.btn:active {
    background-color: #f3e885;
    color: #2b283a;
}


/* Layout */

/* 
Challenge:
1. Give the images in section two a class.
2. Use that class to set the width and 
   border-radius for the images.
3. Wrap the two images in a container div 
   and give it a class.
4. Create the CSS selector for that class 
   and use flex-box to layout the images
   as shown in the slide.
*/


/*
  Challenge 6:
   1. Convert the padding of header, section, and footer from px to em
   2. Convert the bottom-margin of .main-image from px to em
*/



/*
  Challenge 10:
    1. Create a new media query that targets a browser width of 768px or wider. 
    2. Within the media query, select the header, section, and footer elements
       and apply a top and bottom padding of 2.875em.
    3. Adjust the initial padding for the header, section and footer elements.
       Set a top and bottom padding value in em equal to 20px.
*/


header, 
section, 
footer {
    padding: 1.25em 0; /* 46/16 */
}

header, .section-two {
    background-color: #5f29a3;
}

/* section {

} */

/* Challenge:
1. Center the footer's text horizontally.
2. Give the text space top and bottom.
   ⚠️ Don't add margin! Look at sections
   and header for inspiration. 
3. Give the text the correct color.
*/

footer {
    text-align: center;
    color: #5f29a3;
}

.section-two {
    color: whitesmoke;
}


/*
 Challenge 1:
  Use a percentage value to create flexible containers 
  that resize according to their parent’s width
*/


/*
  Challenge 3:
   1. Google "how to set the maximum width of an element"  
   2. Apply a maximum width of 800px to .container
*/

.container {
    width: 90%;
    max-width: 800px;
    margin: 0 auto;
}


/*
  Challenge:
   1. Apply a maximum width to .main-image
   2. Make the image slightly narrower than 
     its container and center it on the page 
*/


.main-image {
    display: block;
    width: 100%;
    max-width: 640px;
    margin: 0 auto 2em; /* 32/16 */
}


/*
  Challenge:
    - Make each .feature-image fluid using a percentage
    - The images should display proportionally on the same line, 
      each taking up about half of the space
*/


.feature-image {
    width: 100%;
    border-radius: 4.6px;
    margin-bottom: 1em;
}

/* .section-two-image-container {
    display: flex;
    flex-direction: column;
} */


/* ------NAVIGATION ---------- */

/*
  Challenge 15: Write initial nav styles
    1. Center-align the header content
    2. Apply a top margin to the nav element to create space
       between the nav and subheading
    3. Make sure that the center alignment, the nav’s top margin,
       and dotted borders between links display only on viewport widths
       narrower than 768px
*/

nav a {
    color: #fff;
    text-decoration: none;
    font-size: 1.125rem; /* 18/16 */
    padding: 0.85em 0; /* Setting the value relative to the current font-size */
    display: block; /* This way, you can see the affect of the padding */
}

ul {
    padding: 0;
    margin: 0;
    list-style-type: none;
}


/* ----- MEDIA QUERIES ----- */

/*
  Challenge:
    1. Create a media query that targets a browser width
       of 480px or wider
    2. Within the media query, select .section-two-image-container
       and add the flexbox property to display the images on the same row
    3. Inside the media query, select .feature-image and 
       add the fluid width for wider screens only
*/

@media (min-width: 480px) {
    .section-two-image-container {
        display: flex;
        justify-content: space-between;
    }
    .feature-image {
        width: 48.8%;
    }
}

@media (max-width: 767px) {
    header {
        text-align: center;
    }

    nav {
        margin-top: 1.25em;
    }

    li:not(:last-child) {
        border-bottom: 1px dotted #a190b6;
    }
}

/*
  Challenge: Navigation styles for wider screens
    1. Use flexbox to display the navigation horizontally
       on one row when the screen is 768px or wider
    2. Align the nav with the right edge of its container
    3. Apply space between each link with a margin
    4. On wider screens, all of the content inside the header
       should be vertically centered
*/

@media (min-width: 768px) {
    header,
    section,
    footer {
        padding: 2.875em 0;
    }

    .btn {
        display: inline-block;
        margin-right: 0.5em;
    }

    h1 {
        font-size: 2.25rem;
    }

    h2 {
        font-size: 1.75rem;
    }

    .subheading {
        font-size: 1.25rem;
    }

    p {
        font-size: 1.125rem;
    }

    header .container, 
    nav ul {
        display: flex;
    }

    header .container {
        justify-content: space-between;
        align-items: center;
    }

    nav li {
        margin-left: 1.25em;
    }
}





/*Think "Mobile First" & Common Breakpoints 

- 480px are for mobile phones
- 768px are for tablets
- 1024px are for smaller laptop screens
- 1280px are for desktop screens and larger screens

*/



/* CSS Specificity

ID's beat out Class's which beat out
Element selectors

Think about the CSS Point System

Element = 1 point

Class = 10 points

ID = 100 points

*/

/* 
Challenge:
1. Create a compound selector which
targets the anchor links inside the
class "links-container".
2. Set their color to dodgerblue.
3. Set the size to 20px.
4. Remove the underline.

Stretch Goal:
1. Put a hover state on them so
the color changes to fuschia when
the cursor hovers over them.
*/

/* 
.links-container a {
    color: dodgerblue;
    font-size: 20px;
    text-decoration: none;
} 
    
.links-container a:hover {
    color: fuchsia;
}

*/


/* 
Challenge:
1. Change the buttons to links.
2. Style them like buttons so they
   look the same. (you can re-use 
   most of the CSS!)
⚠️ This will cause a layout issue!
 */

/* button{
    padding: 10px 19px;
    border-radius: 4px;
    background-color: #fff200;
    background-color: gold;
    font-size: 14px;
    cursor: pointer;
    color: #1d1e22;
    border: none;
    margin-top: 20px
} */

/* a { 
    background-color: #fff200;
    background-color: gold;
    font-size: 14px;
    cursor: pointer;
    color: #1d1e22;
    border: none;
    margin-top: 20px;
}

*/

/* Solution:

/* 
Challenge:
1. Change the buttons to links.
2. Style them like buttons so they
   look the same. (you can re-use 
   most of the CSS!)
⚠️ This will cause a layout issue!


 a{
    padding: 10px 19px;
    border-radius: 4px;
    background-color: #fff200;
    background-color: gold;
    font-size: 14px;
    cursor: pointer;
    color: #1d1e22;
    border: none;
    margin-top: 20px
}

*/

/* Block Elements

- They stack on top of each other

- Examples include, div, p, h1, and they are all
elements

- Also, you can set the height and margin top and
bottom on a block element


Next are Inline Elements

- They sit side by side

- Some examples, include, <span> and <a> tags

- Also, you cannot set the height and marin
top and bottom on an inline element

Then you have Inline-block elements

- They sit side by side like inline elements

- Button and input are examples of inline-block elements

- You can set the height and margin top
and bottom of inline-block elements

*/